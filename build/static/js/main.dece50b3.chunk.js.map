{"version":3,"sources":["comps/holder.tsx","comps/semester.tsx","comps/semesterHeader.tsx","comps/semesterFooter.tsx","comps/dropTable.tsx","comps/modul.tsx","comps/modulScroller.tsx","comps/status.tsx","comps/overview.tsx","comps/lp.tsx","comps/navButton.tsx","comps/navbar.tsx","comps/dropDownVertiefung.tsx","comps/dropDownSemester.tsx","messages.tsx","comps/popup.tsx","comps/optionContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Holder","props","onDragStart","event","i","getIndex","modulProps","modulState","dataTransfer","setData","JSON","stringify","result","length","semester","semesterId","holder","holderId","React","createElement","className","holderCount","key","onDragOver","preventDefault","stopPropagation","onDrop","draggable","name","id","lp","angebot","getModul","Semester","date","Date","currentYear","getFullYear","currentMonth","getMonth","tempSecondYear","semesterType","year","secondYear","text","SemesterHeader","getSemesterHeader","tempHolderProps","push","getHolder","points","count","stateArray","index","semesterNumber","getExpression","SemesterFooter","DropTable","targetProps","input","parse","getData","appendModul","semesterCount","tempSemesterProps","chosenModuleArray","getSemester","Modul","onClick","showInfo","InfoIcon","modulDone","DoneIcon","ModulScroller","dropInScroller","cur","bestanden","getModules","Status","useEffect","Overview","Lp","lpContent","NavButton","_useState","useState","_useState2","_slicedToArray","curr","setCurr","last","icon","_useState3","_useState4","setIcon","trigger","Navbar","isBright","setBright","ThemeModeButtonProps","LightModeIcon","NightsStayIcon","changeTheme","settingButtonProps","SettingsIcon","shopOptions","logoutButtonProps","LogoutIcon","feedbackButtonProps","FeedbackIcon","deleteButtonProps","Delete","resetAll","white","getCSSVar","aliceWhite","middark","dark","richDark","setCSSVar","value","document","documentElement","style","setProperty","getComputedStyle","getPropertyValue","DropDownVertiefung","Dropdown","Toggle","toString","state","lang","Menu","options","map","option","Item","as","kurz","DropDownSemester","initialState","setState","update","ModulStatus","ErrorMessages","ModulAngebot","Popup","handleClose","information","additionalText","Fragment","Modal","show","onHide","centered","Header","Title","Body","Footer","Button","OptionContainer","showOptions","closeButton","App","getAllModules","setModule","vertiefungen","setVertiefungen","_useState5","_useState6","statusText","setStatus","_useState7","_useState8","timerID","setTimerID","_useState9","_useState10","lpText","setLp","_useState11","_useState12","setShow","_useState13","getInitPopupInfo","_useState14","popupText","setPopupText","_useState15","_useState16","setShowOptions","_useState17","_useState18","setSemesterCount","_useState19","_useState20","popupProps","optionsContainerProps","toggleOptions","navBarProps","setModulProp","ResetAll","semesterDropDown","vertiefungDropDown","getVertiefungen","vertiefung","arrayObjects","_toConsumableArray","alteredObject","dropTableProps","voteModul","immer","minPunkte","vorModule","ss","ws","modul","newSemester","newHolder","updateArray","findIndex","curSem","reason","checkMinPoints","checkVorModules","modulName","Erfolg1","Erfolg2","ErrorPunkte1","ErrorPunkte2","ErrorPunkte3","getErrorPunkte","vorModules","singlePlural","ErrorVor1s","ErrorVor1","singlePlural2","ErrorVor2s","ErrorVor2","getErrorVor","updateStatus","checkVote","minPoints","lpToCurSem","arr","vor","vorModul","searchModul","VorCorrupted","bool","property","fetch","method","body","first_name","last_name","headers","Content-Type","then","response","json","data","console","log","sum","updateLp","removed","removeDependentModules","clearTimeout","setTimeout","Object","assign","ResetModul","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.dece50b3.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport { modulProps } from \"./modul\"\n\nexport interface holderProps{\n\n    semesterId: number,\n    holderId: number,\n    onDrop: (event: React.DragEvent, props: holderProps) => void,\n    modulState: modulProps[],\n    holderCount: number\n}\n\nexport default function Holder(props: holderProps){\n\n    function getClasses(): string{\n\n        if(props.holderCount == props.holderId)return \"holder last\"\n        return \"holder\"\n    }\n\n    function onDragOver(event: React.DragEvent){\n\n        event.preventDefault()\n        event.stopPropagation()\n    }\n\n    function onDragStart(event: React.DragEvent){\n\n        let i = getIndex()\n        if(i != null){\n\n            const modulProps: modulProps = props.modulState[i]\n            event.dataTransfer.setData(\"modul\", JSON.stringify(modulProps))\n        }\n    }\n\n    //returns the index number if the holder holds a modul\n    //return null if not\n    const getIndex = (): number | null => {\n\n        let result = null\n\n        for(let i = 0; i < props.modulState.length; i++){\n\n            if(props.modulState[i].semester === props.semesterId && props.modulState[i].holder === props.holderId){\n\n                result = i\n            }\n        }\n\n        return result\n    }\n\n\n    //returns the JSX Element of the index State array\n    //return empty JSX Element of no module is chosen\n    function getModul(): JSX.Element{\n\n        let i = getIndex()\n\n        if(i != null){\n\n            return(\n\n                <div className=\"modulHolder\" draggable onDragStart={onDragStart}>\n                <p className=\"name\">{props.modulState[i].name}</p>\n                <p className=\"id\">{props.modulState[i].id}</p>\n                <p className=\"lp\">{props.modulState[i].lp}</p>\n                <p className=\"angebot\">{props.modulState[i].angebot}</p>\n                </div>\n            )\n        }\n        else{\n\n            return(\n\n                <div className=\"modulHolder\"/>\n            )\n        }\n    }\n\n    return(\n        <div className={getClasses()} key={props.holderId} onDragOver={onDragOver} onDrop={(event) => props.onDrop(event, props)}>\n            {\n            getModul()\n            }\n        </div>\n    )\n}","import React, {useState} from \"react\"\nimport Holder from \"./holder\"\nimport { holderProps } from \"./holder\"\nimport { modulProps } from \"./modul\"\nimport SemesterHeader, {semesterHeaderProps} from \"./semesterHeader\"\nimport SemesterFooter, { semsterFooterProps } from \"./semesterFooter\"\n\nexport interface semesterProps{\n\n    id: number,\n    holderCount: number,\n    //onDrop: (event: React.DragEvent) => any\n    onDrop: (event: React.DragEvent, props: holderProps) => void,\n    modulState: modulProps[]\n}\n\n\n\nexport default function Semester(props: semesterProps){\n\n\n    //return Array of Holder Objects as JSX\n    function getHolder(): JSX.Element[]{\n\n        const result = []\n\n        for(let i = 1; i < props.holderCount+1; i++){\n\n            const tempHolderProps: holderProps = {\n                \n                semesterId: props.id,\n                holderId: i,\n\n                onDrop: props.onDrop,\n                modulState: props.modulState,\n                holderCount: props.holderCount\n            }\n\n            result.push(Holder(tempHolderProps))\n        }\n        return result\n    }\n\n    //return the header element\n    function getSemesterHeader(): JSX.Element{\n\n        const date = new Date()\n        const currentYear = date.getFullYear() + props.id - 1\n        const currentMonth = date.getMonth()\n\n    \n\n        //if the current time is beyond 7. Month (July)\n        //the header starts with SS else WS\n        const tempSecondYear = (): number | null=> {\n\n            \n            if(props.id % 2 == 1){\n\n                if(currentMonth > 7){\n                    return currentYear +1\n                }\n                else{\n                    return null\n                }\n            }\n            else{\n\n                if(currentMonth > 7){\n                    return null\n                }\n                else{\n                    return currentYear +1\n                }\n            }\n        }\n\n        //returns the semsester type\n        //Sommersemester or Wintersemester\n        //decides if the second year variable is null or nor\n        //WS22/23 -> second year == 23\n        const tempSemesterType = (): string => {\n\n            if(tempSecondYear() == null){\n                return \"SS\"\n            }\n            else{\n                return \"WS\"\n            }\n        }\n\n        const tempSemesterHeaderProps: semesterHeaderProps = {\n\n            semesterType: tempSemesterType(),\n            year: currentYear,\n            secondYear: tempSecondYear()\n        }\n\n        return SemesterHeader(tempSemesterHeaderProps)\n    }\n\n    //footer element to display the lp per semester\n    function getSemesterFooter(): JSX.Element{\n\n    \n        const tempFooterProps: semsterFooterProps = {\n\n            stateArray: props.modulState,\n            semesterNumber: props.id\n        }\n\n\n        return(\n            SemesterFooter(tempFooterProps)\n        )\n    }\n\n    return(\n        <div className=\"semester\" key={props.id}>\n            {getSemesterHeader()}\n            {getHolder()}\n            {getSemesterFooter()}\n        </div>\n    )\n}","import React from \"react\"\n\nexport interface semesterHeaderProps{\n\n    semesterType: string,\n    year: number,\n    secondYear: number | null\n}\n\n//this function retuns the JSX dropHeader element\n//which shows the current and folloying semester\nexport default function SemesterHeader(props: semesterHeaderProps){\n\n    const text = (): string => {\n\n        let result = props.semesterType + props.year\n\n        if(props.secondYear != null){\n\n            result += \"/\" + props.secondYear\n        }\n\n        return result\n    }\n\n\n    return(\n\n        <div className=\"semesterHeader\">\n            <p className=\"semesterHeaderText\">{text()}</p>\n        </div>\n    )\n}","import React from \"react\"\nimport { modulProps } from \"./modul\"\n\n\nexport interface semsterFooterProps{\n\n    stateArray: modulProps[],\n    semesterNumber: number\n}\n\n\n//shows LP unter each semester\nexport default function SemesterFooter(props: semsterFooterProps){\n\n\n    function getExpression():string{\n\n        let points: number = 0\n        \n        const count: number = props.stateArray.length\n        const index: number = props.semesterNumber\n    \n\n        for(let i = 0; i < count; i++){\n\n            //if modul is in same semester as this footer --> add points\n            if(props.stateArray[i].semester === index){\n\n                points += props.stateArray[i].lp\n            }\n        }\n        return points + \"LP\"\n    }\n\n\n    return(\n        <div className=\"semesterFooter\">\n            <p className=\"footerLp\">{getExpression()}</p>\n        </div>\n    )\n\n}","import React, { Children, Ref, useEffect, useRef, useState } from \"react\"\nimport Holder, { holderProps } from \"./holder\"\nimport Semester from \"./semester\"\nimport { modulProps } from \"./modul\"\nimport { semesterProps } from \"./semester\"\nimport SemesterHeader, { semesterHeaderProps } from \"./semesterHeader\"\nimport SemesterFooter, { semsterFooterProps } from \"./semesterFooter\"\n\n\nexport interface dropTableProps{\n\n    chosenModuleArray: modulProps[]\n    appendModul: (modul: modulProps ,semester: number, holder: number) => void\n    semesterCount: number\n    holderCount: number\n}\n\n\nexport default function DropTable(props: dropTableProps){\n\n    \n\n\n    //create Semester grid\n    function getSemester(): JSX.Element[]{\n\n        const result = []\n\n\n        //loop over for the semester count --> how many semesters should be there\n        for(let i = 1; i < props.semesterCount+1; i++){\n\n            //we need to pass down information as well as the drop function to the child component\n            //this is archieved via the semesterProps Interface\n            //we pass the id of the semester id=1==first semester \n            //the drop function ref as well as the modulState which tells if a module is chosen\n            //are then passed further to the holder Child comp also via an Interface\n            //but we need to pass down for perfomance reasons only the modules that are contained \n            //inside that specific semester, for example smester 3 need only to know what modules\n            //are chosen in semester 3 --> as the state array is unsorted (also performance)\n            //we need to filter it by looping throught\n\n            \n            const tempSemesterProps: semesterProps = {\n\n                id: i,\n                holderCount: props.holderCount,\n                onDrop: onDrop,\n                modulState: props.chosenModuleArray\n            }\n\n            result.push(Semester(tempSemesterProps))\n        }\n        return result\n    }\n\n    //is fired through the holder child\n    function onDrop(event: React.DragEvent, targetProps: holderProps): void{\n\n        const input: modulProps = JSON.parse(event.dataTransfer.getData(\"modul\"))\n        const semester: number | null = targetProps.semesterId\n        const holder: number | null = targetProps.holderId\n        //fires voteModul Function in App \n        props.appendModul(input, semester, holder)\n    }\n\n    \n    return(\n        <div className=\"dropSection\" key={600}>\n\n            <div className=\"dropTable\">\n                \n                {getSemester()}\n                \n            </div>\n\n        </div>\n        \n    )\n}","import React, { DragEventHandler, useState } from \"react\"\nimport \"../mainPage.css\"\nimport Popup from \"./popup\"\nimport InfoIcon from '@mui/icons-material/Info'\nimport QuestionMarkIcon from '@mui/icons-material/QuestionMark'\nimport DoneIcon from '@mui/icons-material/Done'\n\nexport enum modulProp{\n\n\n}\n\nexport interface modulProps{\n\n    semester: number | null,\n    holder: number | null,\n    bestanden: boolean,\n    name: string,\n    id: string,\n    lp: number,\n    angebot: string,\n    minPunkte: number | null,\n    vorModule: string[] | null,\n    showInfo:(props: modulProps) => void,\n    modulDone:(props: modulProps) => void\n}\n\n\nexport default function Modul(props: modulProps){\n\n    function onDragStart(event: React.DragEvent){\n\n        //pass Props Object as Transfer Data\n        event.dataTransfer.setData(\"modul\", JSON.stringify(props))\n        \n    }\n\n\n\n    return(\n        <div id={(props.id)} key={props.id} className=\"modul\" draggable onDragStart={onDragStart}>\n                <p className=\"name\">{props.name}</p>\n                <p className=\"id\">{props.id}</p>\n                <p className=\"lp\">{props.lp} LP</p>\n                <p className=\"angebot\">{props.angebot}</p>\n                <div className=\"modulButtons\">\n                    <div className=\"infoButton\" onClick={() => props.showInfo(props)}>\n                        <InfoIcon className=\"infoButton icon\"/>\n                    </div>\n                    <div className=\"doneButton\" onClick={() => props.modulDone(props)}>\n                        <DoneIcon className=\"doneButton icon\"/>\n                    </div>\n                </div> \n        </div>\n    )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexport class Modul extends React.Component<ModulProps>{\n\n    private modulRef: React.RefObject<HTMLInputElement>\n\n    constructor(props: ModulProps){\n        super(props)\n        this.modulRef = React.createRef()\n    }\n\n    onDragStart(event: React.DragEvent<HTMLDivElement>){\n\n        let modul = event.target as HTMLElement\n        event.dataTransfer.setData(\"id\", modul.id)\n    }\n\n    render() {\n        \n        return (\n            <div id={(this.props.id).toString()} className=\"Modul\" ref={this.props.modulRef} draggable onDragStart={this.onDragStart}>\n                <p className=\"name\">{this.props.name}</p>\n                <p className=\"id\">{this.props.id}</p>\n                <p className=\"lp\">{this.props.lp}</p>\n                <p className=\"anbeot\">{this.props.angebot}</p>\n            </div>\n        )\n    }\n    \n}\n*/","import React, {useState} from \"react\";\nimport Modul, {modulProps} from \"./modul\";\n\nexport interface modulScrollerProps{\n\n    chosenModuleArray: modulProps[]\n    dropInScroller:(event: React.DragEvent) => void\n}\n\n\nexport default function ModulScroller(props: modulScrollerProps){\n\n\n    //function gets called every time an object in the props array is changed\n    //renders all the modules into the scroller\n\n    //semester and holder both != null -> chosen\n    //semester == null -> in scroller\n    //holder == null -> \"passed\"\n    function getModules(): JSX.Element[]{\n\n        let result: JSX.Element[] = []\n\n        //runs for every module\n        for(let i = 0; i < props.chosenModuleArray.length; i++){\n\n            //current Modul Props Object\n            let cur = props.chosenModuleArray[i]\n\n            if(cur.semester === null && cur.bestanden === false){\n\n                result.push(Modul(cur))\n            }\n        }\n        return result\n    }\n\n    //drop from table to scroller (unvote)\n    function onDragOver(event: React.DragEvent){\n\n        event.preventDefault()\n        event.stopPropagation()\n    }\n\n\n    return(\n        <div className=\"modulScroller\" key={500} onDragOver={onDragOver} onDrop={(event) => props.dropInScroller(event)}>\n            {getModules()}\n        </div>\n    )\n}","import React, { useEffect } from \"react\"\n\n\nexport interface statusProps{\n\n    text: string | null\n}\n\n\n\nexport default function Status(props: statusProps){\n\n\n    const className = ():string => {\n\n        if(props.text == \"\"){\n\n            return \"statusText\"\n        }\n        else{\n\n            return \"statusText active\"\n            \n        }\n    }\n\n    useEffect(() => {\n\n        \n    },[props.text])\n\n    return(\n        <div className=\"statusWrapper\">\n            <p className={className()}>{props.text}</p>\n        </div>\n    )\n}","import React from \"react\"\n\n\ninterface overviewProps{\n\n    types: string[]\n}\n\n\nexport default function Overview(){\n\n\n    return(\n        <div className=\"overviewWrapper\">\n            \n        </div>\n    )\n}","import React from \"react\"\n\n\nexport interface lpProps{\n\n    lpContent: number\n}\n\nexport default function Lp(props: lpProps){\n\n    const lp: string = \" LP\"\n\n    return(\n        <div className=\"lpWrapper\">\n            <p className=\"lpText\">{props.lpContent + lp}</p>\n        </div>\n    )\n}","import React, { Component, useEffect, useState } from \"react\"\n\n\n\nexport interface navButtonProps{\n\n    name: string,\n    icon: React.ReactNode[],\n    trigger: () => void\n}\n\n\nexport default function NavButton(props: navButtonProps){\n\n    //change theme icon \n    const [curr, setCurr] = useState<number>(0)\n    const last = props.icon.length-1\n    const [icon, setIcon] = useState<React.ReactNode>(props.icon[curr])\n\n    useEffect(() => {\n\n        setIcon(props.icon[curr])\n    }, [curr])\n\n    function getIcon(){\n\n        if(curr < last){\n\n            setCurr(curr + 1)\n        }\n        else{\n\n            setCurr(0)\n        }\n        props.trigger()\n    }\n\n\n    return(\n\n        <div className=\"navButton-wrapper\" onClick={getIcon}>\n            \n            {icon} \n\n            <div className=\"textwrapper\">\n                <div className=\"text\">{props.name}</div>\n            </div>\n\n        </div>\n    )\n}\n\n","import React, { CSSProperties, useEffect, useState } from \"react\"\nimport NavButton, { navButtonProps } from \"./navButton\"\nimport Delete from \"@mui/icons-material/Delete\"\nimport LightModeIcon from '@mui/icons-material/LightMode'\nimport NightsStayIcon from '@mui/icons-material/NightsStay'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport LogoutIcon from '@mui/icons-material/Logout'\nimport FeedbackIcon from '@mui/icons-material/Feedback'\n\n//pass App Functions to the NavBar\nexport interface NavBarProps{\n\n    resetAll:() => void,\n    shopOptions:() => void\n}\n\nexport default function Navbar(props: NavBarProps){\n\n    //theme state\n    const [isBright, setBright] = useState<boolean>(false)\n    \n\n    const ThemeModeButtonProps : navButtonProps = {\n\n        name: \"Theme\",\n        icon: [<LightModeIcon className='icon'/>, <NightsStayIcon className=\"icon\"/>],\n        trigger: changeTheme\n    }\n\n    const settingButtonProps: navButtonProps = {\n\n        name: \"Optionen\",\n        icon: [<SettingsIcon className=\"icon\"/>],\n        trigger: props.shopOptions\n    }\n\n    const logoutButtonProps: navButtonProps = {\n\n        name: \"Logout\",\n        icon: [<LogoutIcon className=\"icon\"/>],\n        trigger: changeTheme\n    }\n\n    const feedbackButtonProps: navButtonProps = {\n\n        name: \"Feedback\",\n        icon: [<FeedbackIcon className=\"icon\"/>],\n        trigger: changeTheme\n    }\n\n    const deleteButtonProps: navButtonProps = {\n\n        name: \"Reset\",\n        icon: [<Delete className=\"icon\"/>],\n        trigger: props.resetAll\n    }\n\n    function changeTheme(){\n\n        \n        \n\n        let white = getCSSVar(\"--white\")\n        let seaSaltWhite = getCSSVar(\"--sea-salt-white\")\n        let aliceWhite = getCSSVar(\"--alice-white\")\n        let antiFlashWhite = getCSSVar(\"--anti-flash-white\")\n\n        let middark = getCSSVar(\"--middark\")\n        let dark = getCSSVar(\"--dark\")\n        let richDark = getCSSVar(\"--rich-dark\")\n\n        if(isBright){\n\n            setCSSVar(\"--background1\", middark)\n            setCSSVar(\"--background2\", dark)\n            setCSSVar(\"--foreground\", white)\n            setBright(!isBright)\n        }\n        else{\n\n            setCSSVar(\"--background1\", white)\n            setCSSVar(\"--background2\", aliceWhite)\n            setCSSVar(\"--foreground\", richDark)\n            setBright(!isBright)\n        }\n        \n        \n\n        function setCSSVar(name: string, value: string){\n\n            document.documentElement.style.setProperty(name, value)\n        }\n\n        function getCSSVar(name: string){\n\n            return getComputedStyle(document.documentElement).getPropertyValue(name);\n        }\n    }\n\n    \n\n    return(\n        <div className=\"navBar\">\n            <NavButton {...ThemeModeButtonProps}/>\n            <NavButton {...feedbackButtonProps}/>\n            <NavButton {...settingButtonProps}/>\n            <NavButton {...deleteButtonProps}/>\n            <NavButton {...logoutButtonProps}/>\n        </div>\n    )\n}\n","import React, {useState} from \"react\"\nimport { Dropdown } from \"react-bootstrap\"\n\n\nexport interface dropDownPropsVertiefung{\n\n    id: number,\n    //CISS /VC\n    options: vertiefung[],\n    //intital e.g. \"Prim..\" then what option is chosen\n    state: vertiefung,\n    //fires when option is clicked\n    trigger:(id: number, chosen: vertiefung) => boolean\n}\n\nexport interface vertiefung{\n\n    kurz: string,\n    lang: string\n}\n\n\n\nexport default function DropDownVertiefung(props: dropDownPropsVertiefung){\n\n\n    return(\n        \n        <Dropdown>\n\n            <Dropdown.Toggle id={props.id.toString()} className=\"dropDownWrapper override\">\n                \n\n                {props.state.lang}\n\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className=\"dropDownMenu\">\n                {\n                    props.options.map((option) => \n                    \n                    <Dropdown.Item as=\"button\" onClick={() => props.trigger(props.id, option)} key={option.kurz}>{option.lang}</Dropdown.Item>\n                    )\n                }\n                \n            </Dropdown.Menu>\n\n        </Dropdown>\n    )\n}","import React, {useState} from \"react\"\nimport { Dropdown } from \"react-bootstrap\"\n\n\nexport interface dropDownPropsSemester{\n\n    id: number,\n    \n    semester: number[],\n\n    initialState: number,\n    //fires when option is clicked\n    trigger:(semester: number) => void\n}\n\n\n\nexport default function DropDownSemester(props: dropDownPropsSemester){\n\n\n    const [state, setState] = useState<string>(props.initialState.toString() + \" Semester\")\n\n    function update(option: number){\n\n        //update the state (what is shown in the dropdown)\n        setState(option.toString() + \" Semester\")\n        //trigger to the app comp (actual function)\n        props.trigger(option)\n    }\n\n\n    return(\n        \n        <Dropdown>\n\n            <Dropdown.Toggle id={props.id.toString()} className=\"dropDownWrapper override\">\n                \n\n                {state}\n\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className=\"dropDownMenu\">\n                {\n                    props.semester.map((option) => \n                    \n                    <Dropdown.Item as=\"button\" onClick={() => update(option)} key={option}>{option}</Dropdown.Item>\n                    )\n                }\n                \n            </Dropdown.Menu>\n\n        </Dropdown>\n    )\n}","export enum ModulStatus{\n\n    Erfolg1=\"Modul \",\n    Erfolg2=\" wurde erfolgreich belegt\",\n    Warnung=\"Modul wird nicht empfohlen\",\n    ErrorPunkte1=\"Modul \",\n    ErrorPunkte2=\" setzt mindestens \",\n    ErrorPunkte3=\"LP voraus\",\n    ErrorVor1=\"Modul \",\n    ErrorVor1s=\"Module \",\n    ErrorVor2=\" wird vorausgesetzt\",\n    ErrorVor2s=\" werden vorausgesetzt\",\n    ResetModul= \" wurde zurückgesetzt\",\n    ResetAll= \"Module und LP zurückgesetzt\",\n}\n\nexport enum ErrorMessages{\n\n    VorCorrupted=\"ERROR 501: Data Corrupted\"\n}\n\nexport enum ModulAngebot{\n\n    immer=\"Ganzjärig\",\n    ss=\"Sommersemester\",\n    ws=\"Wintersemester\"\n}\n\n","import React, {useState} from \"react\"\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport { modulProps } from \"./modul\"\n\nexport interface popupProps{\n\n  show: boolean,\n  showInfo:(source: modulProps, bool: boolean) => void,\n  information: popupText\n}\n\n\nexport interface popupText{\n\n  modulProps: modulProps,\n  additionalText: string\n}\n\n\nfunction Popup(props: popupProps) {\n\n\n  const handleClose = () => props.showInfo(props.information.modulProps, false)\n  const handleShow = () => props.showInfo(props.information.modulProps, true)\n\n\n  //define the modul vars\n  const name = props.information.modulProps.name\n  const id = props.information.modulProps.name\n  const angebot = props.information.modulProps.lp\n  const lp = props.information.modulProps.lp\n  const minPunkte = (): string => {\n\n    if(props.information.modulProps.minPunkte === null)return \"-\"\n    return props.information.modulProps.minPunkte.toString()\n  }\n  const vorModule = (): string[] => {\n\n    if(props.information.modulProps.vorModule === null)return [\"-\"]\n    return props.information.modulProps.vorModule\n  }\n  const text = props.information.additionalText\n\n  return (\n    <>\n\n      <Modal className=\"modal\" show={props.show} onHide={handleClose} centered>\n        <Modal.Header>\n          <Modal.Title>{name}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{text}</Modal.Body>\n        <Modal.Footer>\n          <Button className=\"button\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default Popup;","import React from \"react\"\nimport { Modal } from \"react-bootstrap\"\n\n\nexport interface optionContainerProps{\n\n    show: boolean\n    showOptions: (bool: boolean) => void\n}\n\n\nexport default function OptionContainer(props: optionContainerProps){\n\n    const handleClose = () => props.showOptions(false)\n    const handleShow = () => props.showOptions(true)\n\n    return(\n\n        <Modal className=\"modal options\" show={props.show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Optionen</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n            <textarea className=\"optionsContainer\"/>\n            </Modal.Body>\n      </Modal>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport './mainPage.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport DropTable, { dropTableProps } from './comps/dropTable'\nimport ModulScroller, { modulScrollerProps } from './comps/modulScroller'\nimport Modul, { modulProps } from './comps/modul'\nimport Status from './comps/status'\nimport Overview from './comps/overview'\nimport Lp, {lpProps} from './comps/lp'\nimport Navbar, { NavBarProps } from './comps/navbar'\nimport DropDownVertiefung, { dropDownPropsVertiefung, vertiefung } from './comps/dropDownVertiefung'\nimport DropDownSemester, { dropDownPropsSemester} from './comps/dropDownSemester'\nimport { ErrorMessages, ModulAngebot, ModulStatus } from './messages'\nimport Popup, { popupProps, popupText } from './comps/popup'\nimport OptionContainer from './comps/optionContainer'\n\n\n//this is for the status bar \n//to show what is done\nexport interface votingModulReasons{\n\n  minPunkte: number | null,\n  vorModule: string[] | null,\n}\n\nfunction App() {\n\n  //this is the kernel object //stores all modules and their states\n  const [chosenModuleArray, setModule] = useState<modulProps[]>(getAllModules())\n\n\n  //dropdown selects\n  //when drop down option is clicked it is stored here\n  //the drop down menu pulls the displayed string from here\n  //initial value is the id of the depending drop down e.g. \"Primaere Vertiefung\"\n  const [vertiefungen, setVertiefungen] = useState<vertiefung[]>([])\n\n  //status text \n  const [statusText, setStatus] = useState<string>(\"Status\")\n  //counter ID to clear last counter before status text disappears\n  const [timerID, setTimerID] = useState<NodeJS.Timeout>()\n  //lp\n  const [lpText, setLp] = useState<number>(0)\n\n\n  //we have one info box its either shown or not\n  //everytime we change the popupText the modal is shown\n  //popup show (infobox) \n  const [show, setShow] = useState<boolean>(false)\n  //popup content\n  const [popupText, setPopupText] = useState<popupText>(getInitPopupInfo())\n\n  //options container modal\n  const [showOptions, setShowOptions] = useState<boolean>(false)\n\n\n  //counter for how many semester grids the table should contain\n  //table is initilized with default value of 8 semester\n  const [semesterCount, setSemesterCount] = useState<number>(12)\n  const [holderCount, setHolderCount] = useState<number>(60)\n\n\n\n\n  /* <--- Property Objects ---> */\n\n  //props for the info popup\n  //contains the trigger and the show function\n  //also the information that need to be displayed\n  const popupProps: popupProps ={\n\n    show: show,\n    showInfo: showInfo,\n    information: popupText\n  }\n\n  //defines options Container\n  const optionsContainerProps = {\n\n    show: showOptions,\n    showOptions: toggleOptions\n  }\n  //show hide options container\n  //is called from navbar button options\n  function toggleOptions(){\n\n    setShowOptions(!showOptions)\n  }\n\n  //pass functions to the navbar\n  const navBarProps: NavBarProps ={\n\n    resetAll: resetAll,\n    shopOptions: toggleOptions\n  }\n\n  const semesterDropDown: dropDownPropsSemester = {\n\n    id: 22,\n    semester: [6,7,8,9,10,11,12],\n    initialState: 6,\n    trigger: semesterDropDownFunction\n\n  }\n  function semesterDropDownFunction(option: number): void{\n\n    setSemesterCount(option)\n  }\n\n  const vertiefungDropDown: dropDownPropsVertiefung = {\n\n    id: 21,\n    options: getVertiefungen(),\n    state: getVertiefungen()[0],\n    trigger: voteVertiefung\n  }\n  function getVertiefungen(): vertiefung[]{\n\n    let result: vertiefung[] = []\n    let init: vertiefung = {\n\n      kurz: \"Vertiefung\",\n      lang: \"Vertiefung\"\n    }\n    let vc: vertiefung = {\n\n      kurz: \"VC\",\n      lang: \"Visual Computing\"\n    }\n    result.push(vc)\n    return result\n  }\n  \n\n  const dropTableProps: dropTableProps = {\n\n    chosenModuleArray: chosenModuleArray,\n    appendModul: voteModul,\n    semesterCount: semesterCount,\n    holderCount: holderCount\n  }\n\n\n\n\n\n  //init function (works like class constructor)\n  //is fired when the \"App\" Component is mounted and dismounted\n  useEffect(() => {\n\n    \n    getModulesFromDataBase()\n  }, [])\n\n\n  //everytime popup text changes the popup must open\n  useEffect(() => {\n\n    if(popupText.additionalText != getInitPopupInfo().additionalText){\n      setShow(true)\n    }\n  }, [popupText])\n\n\n  //everytime a state change this func is called\n  //verify all modules //removes dependent ones\n  useEffect(() => {\n\n    updateLp()\n    removeDependentModules()\n\n  }, [chosenModuleArray])\n\n\n  \n  //fires when status is updated\n  useEffect(() => {\n\n    //clear if any timer is running \n    clearTimeout(timerID)\n    \n\n    //otherwise infinte loop (buggy)\n    if(statusText != \"\"){\n      //clears status after ceratin amount of milli secs\n      setTimerID(setTimeout(clearStatus, 3000))\n    }\n    function clearStatus(){\n      setStatus(\"\")}  \n  }, [statusText])\n\n\n\n  function getModulesFromDataBase(){\n\n    let result: modulProps[] = []\n\n    // payload object\n    const data = {\n    first_name: \"first name\",\n    last_name: \"last name\"\n    }\n\n    // make the request\n    fetch(\"http://localhost/test.php\", {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    headers: {\n    \"Content-Type\": \"application/json; charset=UTF-8\"\n    }\n    })\n    .then((response) => response.json())\n    .then((data) => console.log(data))\n    \n    return result\n  }\n\n\n\n\n  //get example modules\n  function getAllModules(): modulProps[]{\n\n\n    const algo: modulProps = {\n\n      semester: null,\n      holder: null,\n      bestanden: false,\n      name: \"Algo\",\n      id: \"1234\",\n      lp: 6,\n      angebot: ModulAngebot.immer,\n      minPunkte: 6,\n      vorModule: null,\n      showInfo(props) {\n        showInfo(props, true)\n      },\n      modulDone(props) {\n        modulDone(props)\n      }\n    }\n\n    const propra: modulProps = {\n\n      semester: null,\n      holder: null,\n      bestanden: false,\n      name: \"Props\",\n      id: \"4321\",\n      lp: 6,\n      angebot: ModulAngebot.ss,\n      minPunkte: null,\n      vorModule: [\"1234\"],\n      showInfo(props) {\n        showInfo(props, true)\n      },\n      modulDone(props) {\n        modulDone(props)\n      }\n    }\n\n    const propra2: modulProps = {\n\n      \n      semester: null,\n      holder: null,\n      bestanden: false,\n      name: \"Propra\",\n      id: \"4331\",\n      lp: 6,\n      angebot: ModulAngebot.ws,\n      minPunkte: null,\n      vorModule: null,\n      showInfo(props) {\n        showInfo(props, true)\n      },\n      modulDone(props) {\n        modulDone(props)\n      }\n    }\n\n\n\n\n    const allModules: modulProps[] = [algo, propra, propra2]\n\n    return allModules\n  }\n\n\n  function getInitPopupInfo():popupText {\n\n    const text: popupText = {\n\n      modulProps: getAllModules()[0],\n      additionalText: \"initial\"\n    }\n    return text\n  }\n\n\n\n\n\n\n\n\n  /* <--- App Funtions --->*/ \n\n  //drag modul back to scroller\n  function dropInScroller(event: React.DragEvent): void{\n\n    let input = JSON.parse(event.dataTransfer.getData(\"modul\")) as modulProps\n    \n    //null in semester and holder property sysmbols an modul in the scroller\n    voteModul(input, null, null)\n    setStatus(getResetMessage())\n\n    //returns Message\n    function getResetMessage():string{\n\n      return ModulStatus.Erfolg1 + input.name + ModulStatus.ResetModul\n    }\n  }\n\n  //append modul to the droptable and other way round\n  //to archieve this we need to change the semester and holder property\n  function voteModul(modul: modulProps, newSemester: number| null, newHolder: number | null): void{\n\n    //modul -> contains current semester and holder\n    //the other two params the new one\n\n    //drop in Scroller\n    //autoatic ok\n    if(newSemester === null){\n\n      updateArray()\n    }\n\n    //check if valid\n    else if(checkVote(modul, newSemester)){\n\n      updateArray()\n    }\n    \n\n    function updateArray():void{\n\n      //make copy of state array\n      let arrayObjects = [...chosenModuleArray]\n      //get the index of the modul in the state array\n      let index = arrayObjects.findIndex((props) => props.id === modul.id)\n      //make copy of mutatating item\n      let alteredObject = arrayObjects[index]\n      //mutate object \n      alteredObject.semester = newSemester\n      alteredObject.holder = newHolder\n      //put erything back together\n      arrayObjects[index] = alteredObject\n      //update State\n      setModule(arrayObjects)\n    }\n  }\n  //is called when dropdown menu is clicked\n  //check if chosen option is valid\n  function voteVertiefung(id: number, vertiefung: vertiefung): boolean{\n\n\n    //is NOT valid (double choice)\n\n    //another drop down already selected the same item\n    //we need just to run through the vertiefungen state array and check for doubles\n    for(let i = 0; i < vertiefungen.length; i++){\n\n      //found double\n      if(vertiefung.kurz === vertiefungen[i].kurz){\n        return false\n      }\n    }\n\n    //is valid\n\n    //update the state to the new chosen option\n    //usual procedure to update array state\n    //id is here used as the index\n    //first dropdown == 0\n    //second == 1 etc.\n    let arrayObjects = [...vertiefungen]\n\n    let alteredObject = arrayObjects[id]\n\n    alteredObject.kurz = vertiefung.kurz\n    alteredObject.lang = vertiefung.lang\n\n    arrayObjects[id] = alteredObject\n\n    setVertiefungen(arrayObjects)\n    \n\n    return true\n  }\n\n\n\n  /* <--- NavBar Function ---> */ \n\n  //set all modules back and clear status and lp\n  function resetAll(){\n\n    for(let i = 0; i < chosenModuleArray.length; i++){\n\n      setModulProp(i, \"reset\", null)\n      \n    }\n    setStatus(ModulStatus.ResetAll)\n  }\n\n\n\n  /* <--- Check Functions ---> */ \n\n  //checks if the min points are reached\n  //return true if min points are reached --> valid\n  function checkMinPoints(modulProps: modulProps, curSem: number):boolean{\n\n    const minPoints = modulProps.minPunkte\n    //if no min points required --> valid\n    if(minPoints === null)return true\n\n\n    let lpToCurSem: number = 0\n\n    //mind points required\n    \n    //count all points up to the current semester (without the current semester)\n    const arr = [...chosenModuleArray]\n    for(let i = 0; i < arr.length; i++){\n\n      if(arr[i].semester !== null && arr[i].semester! < curSem){\n        \n        //arr[i] is before curr\n        lpToCurSem += arr[i].lp\n      }\n      if(arr[i].bestanden == true){\n\n        lpToCurSem += arr[i].lp\n      }\n    }\n\n    //check if collected points are enough\n    if(minPoints <= lpToCurSem)return true\n    return false\n  }\n  //checks if the vor modules are voted in an earlier semester\n  //returns true if modul can be voted\n  function checkVorModules(modulProps: modulProps, curSem: number):boolean{\n\n    //no vor -> ok\n    const vor: string[] | null = modulProps.vorModule\n    if(vor === null)return true\n\n    //the current semester of the base modul\n    //the vor modules need to be BEFORE this\n\n    //loop all vors\n    for(let i = 0; i < vor.length; i++){\n\n      //current modul\n      const vorModul = searchModul(vor[i])\n    \n\n      //verify if vor modul is before\n      //vor module exists and is voted and is in an earlier semester\n      if(vorModul != null){\n\n        if(vorModul.bestanden)return true\n\n        //vor modul is not voted\n        if(vorModul.semester == null)return false\n        //vor modul is voted in the same or behind (also not valid)\n        else if(vorModul.semester >= curSem)return false\n        //vor modul is marked as passed\n      }\n\n      //the vor modul does not exist\n      //throws error message\n      else{\n\n        setStatus(ErrorMessages.VorCorrupted)\n        return true\n      }\n      return true\n    }\n\n    return true\n  }\n\n  //this function is only called for modules from\n  //scroller ---> dropPanel\n  function checkVote(modulProps: modulProps, curSem: number):boolean{\n\n    //init return (if vote is valid or not) value as true\n    let result: boolean = true\n    //reason object ---> status update reason\n    let reason: votingModulReasons = {\n\n      minPunkte: null,\n      vorModule: null\n    } \n\n    if(!checkMinPoints(modulProps, curSem)){\n\n      reason.minPunkte = modulProps.minPunkte\n      result = false\n    }\n    if(!checkVorModules(modulProps, curSem)){\n\n      reason.vorModule = modulProps.vorModule\n      result = false\n    }\n  \n    updateStatus(modulProps, reason)\n    return result\n  }\n\n  //this function checks for general authentication of all modules that are curr chosen\n  //it also updates the status to give feedback\n  //this func is required for three cases (but is called everytime modul is moved or ver is changed)\n  //1. Modul is moved in DropPanel\n  //2. Modul is dropped in Scroller\n  //3. Modul Vertiefung is changed\n  //is called AFTER the modul has been moved, because of reacts fundament to call array changes as a snapshot\n  //short: this functions calls everytime the array changes, for this we take use of the useEffect Hook\n  function removeDependentModules(): void{\n\n    //this holds the modules that have been removed\n    //used for feedback //what modules were removed\n    let removed: modulProps[] = []\n\n    //run through all modules\n    for(let i = 0; i < chosenModuleArray.length; i++){\n\n      //define curr obj\n      const modul: modulProps = chosenModuleArray[i]\n\n      \n      //filter modules for dropped ones\n      if(modul.semester !== null && modul.holder !== null){\n\n        //call lp Checker \n        if(modul.lp !== null){\n          if(!checkMinPoints(modul, modul.semester)){\n\n            //remove the modul by setting it semester and holder prop to null\n            voteModul(chosenModuleArray[i], null, null)\n            //add the removed modul to the array\n            removed.push(modul)\n          }\n        }\n        //call vor Checker\n        if(modul.vorModule !== null){\n          if(!checkVorModules(modul, modul.semester)){\n\n            voteModul(chosenModuleArray[i], null, null)\n            removed.push(modul)\n          }\n        }\n      }\n    }\n  }\n  \n\n  \n  /* <--- Overview Funtions --->*/ \n\n  //updates the status bar \n  //gets the latest dropped modul and a reason (ok/too few points/...)\n  function updateStatus(modul: modulProps, reason: votingModulReasons){\n\n\n    /* <--- GET the Correct Error Message depending on the reason ---> */ \n\n    //returns the Error Message (string) for points missing\n    function getErrorPunkte(modulName: string, minPunkte: number):string{\n\n      return ModulStatus.ErrorPunkte1 + modulName + ModulStatus.ErrorPunkte2 + minPunkte.toString() + ModulStatus.ErrorPunkte3\n    }\n\n    //returns the Error Message (string) for vor modules\n    function getErrorVor(modulName: string, vorModules: string[]):string{\n      \n      //Modul or Module (plural)\n      const singlePlural = vorModules.length > 1 ? ModulStatus.ErrorVor1s : ModulStatus.ErrorVor1\n      const singlePlural2 = vorModules.length > 1 ? ModulStatus.ErrorVor2s : ModulStatus.ErrorVor2\n      return singlePlural + vorModules + singlePlural2\n    }\n\n    function getSuccess(modulName: string):string{\n\n      return ModulStatus.Erfolg1 + modulName + ModulStatus.Erfolg2\n    }\n\n\n\n\n\n    /* <--- Actual Checking the reason ---> */\n\n    //Success\n    if(reason.minPunkte === null && reason.vorModule === null){\n\n      setStatus(getSuccess(modul.name))\n    }\n\n    //Mindest Punktzahl nicht erreicht \n    else if(reason.minPunkte != null && modul.minPunkte != null){\n\n      setStatus(getErrorPunkte(modul.name, modul.minPunkte))\n    }\n\n    //Vorausgesetzte Module nicht erfuellt\n    else if(reason.vorModule != null && modul.vorModule !=  null){\n\n      setStatus(getErrorVor(modul.name, modul.vorModule))\n    }\n  }\n  \n  function updateLp():void{\n\n    let sum = 0\n    //get all chosen Modules\n    for(let i = 0; i < chosenModuleArray.length; i++){\n\n      if(chosenModuleArray[i].semester != null && chosenModuleArray[i].holder != null || chosenModuleArray[i].bestanden){\n\n        //add up the lp\n        sum += chosenModuleArray[i].lp\n      }\n    }\n    \n    //update state\n    setLp(sum)\n  }\n\n\n\n  /* <--- Modul Funtions --->*/ \n\n  //is triggered through info button of modul\n  function showInfo(modul: modulProps, bool: boolean):void{\n\n    //hide modal\n    if(bool === false){\n\n      setShow(false)\n      return\n    }\n\n    //update the popup state\n    //is opened everytime we update the popuptext prop\n    const content: popupText = {\n\n      modulProps: modul,\n      additionalText: \"This is some Text\"\n    }\n    setPopupText(content)    \n  }\n\n  //mark modul as passed by updating the semester and holder prop in the state\n  function modulDone(props: modulProps){\n\n    //find the modul\n    const index = getIndex(props.id)\n    if(index !== null)setModulProp(index, \"bestanden\", true)\n    \n  }\n  \n  \n\n\n\n  /* <--- Operations --->*/ \n\n  //returns modul from state array with searched id\n  function searchModul(id: string):modulProps | null{\n\n    for(let i = 0; i < chosenModuleArray.length; i++){\n\n      if(chosenModuleArray[i].id === id)return chosenModuleArray[i]\n    }\n    return null\n  }\n\n  //returns index in state array of id from modul\n  function getIndex(id: string): number | null{\n\n    for(let i: number = 0; i < chosenModuleArray.length; i++){\n\n      if(chosenModuleArray[i].id === id)return i\n    }\n    return null\n  }\n\n  function setModulProp(index: number, property: string, value: any): void{\n\n    //make copy of state array\n    let arrayObjects = [...chosenModuleArray]\n    \n    //make copy of mutatating item\n    let alteredObject = arrayObjects[index]\n\n\n    //mutate object \n    switch(property){\n\n      case \"bestanden\":{\n\n        alteredObject.bestanden = value\n        break;\n      }\n\n      case \"semester\":{\n\n        alteredObject.semester = value\n        break;\n      }\n\n      case \"holder\":{\n\n        alteredObject.holder = value\n        break;\n      }\n\n      case \"reset\":{\n\n        alteredObject.semester = null\n        alteredObject.holder = null\n        alteredObject.bestanden = false\n      }\n    }\n\n\n\n\n    //put erything back together\n    arrayObjects[index] = alteredObject\n    //update State\n    setModule(arrayObjects)\n  }\n  \n\n  return (\n    <div className='wrapper'>\n\n      <Popup {...popupProps}/>\n      <OptionContainer {...optionsContainerProps}/>\n      <Navbar {...navBarProps}/>\n\n      <div className='bodyWrapper'>\n        <div className='body'>\n\n\n          <div className='header'>\n            <div className='mainHeader'>\n              <DropDownVertiefung {...vertiefungDropDown}/>\n              <DropDownSemester {...semesterDropDown}/>\n            </div>\n            <div className='sideHeader'>Hello</div>\n          </div>\n\n\n          <div className='main'>\n            <DropTable key={100} {...dropTableProps}/>\n            <ModulScroller key={200} chosenModuleArray={chosenModuleArray} dropInScroller={dropInScroller}/>\n          </div>\n\n\n          <div className='footer'>\n            <div className='footerWrapper'>\n              <Status text={statusText}/>\n              <Lp lpContent={lpText}/>\n            </div>\n            <Overview/>\n          </div>\n\n\n        </div>\n      </div>\n\n    </div>\n    \n  )\n}\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n)\nroot.render(\n    <App/>\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\n\n"],"sourceRoot":""}